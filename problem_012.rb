# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'mathn'

time_started = Time.now
puts "Started processing at #{time_started}."

# http://mathschallenge.net/library/number/number_of_divisors has the key to this one!
# A natural number has number of divisors derived from powers of prime factors.
# Using this below

minimum_divisors = 500

def divisor_count(number)
  total = 1
  number.prime_division.each do |i|
    # prime_division is amethod in the standard 'mathn' library that returns
    # a two dimensional array of prime factors. For instance the prime factors
    # of 48 are 3**1 and 2**4, which would be listed as [3, 1], [2, 4].
    # Add one to each power, multiply together to get divisors!
    total *= (i[1] + 1)
  end
  return total
end

triangle_number, increment = 1, 1

until divisor_count(triangle_number) > 500
  increment += 1
  triangle_number += increment
  puts "#{triangle_number}"
end

puts "The first triangle number with more than #{minimum_divisors}, is #{triangle_number}"

time_finished = Time.now
puts "Processing complete at #{time_finished}."
puts "It took #{time_finished-time_started} seconds to complete."